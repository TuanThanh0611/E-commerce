import { DOCUMENT } from '@angular/common';
import { Optional } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { BlobMock } from '../classes/blob-mock';
import { LocationMock } from '../classes/location-mock';
import { StorageMock } from '../classes/storage-mock';
import { SSR_LOCATION } from '../tokens/ssr-location';
import { SSR_USER_AGENT } from '../tokens/ssr-user-agent';
import { EVENT_TARGET } from '../utils/event-target';
import { alwaysFalse, alwaysNull, alwaysRejected, alwaysZero, emptyFunction, identity, } from '../utils/functions';
import { CACHES_MOCK } from './universal-caches';
import { CRYPTO_MOCK } from './universal-crypto';
import { NAVIGATOR_MOCK } from './universal-navigator';
import { performanceFactory } from './universal-performance';
import { SPEECH_SYNTHESIS_MOCK } from './universal-speech-synthesis';
const COMPUTED_STYLES = {
    getPropertyPriority: () => '',
    getPropertyValue: () => '',
    item: () => '',
    removeProperty: () => '',
    setProperty: emptyFunction,
};
const COMPUTED_STYLES_HANDLER = {
    get: (obj, key) => (key in obj ? obj[key] : null),
};
const COMPUTED_STYLES_PROXY = new Proxy(COMPUTED_STYLES, COMPUTED_STYLES_HANDLER);
const CSS_RULES = new (class extends Array {
    item = () => null;
})();
const BAR_PROP = {
    visible: false,
};
const DB_REQUEST = {
    ...EVENT_TARGET,
    onblocked: null,
    onerror: null,
    onsuccess: null,
    onupgradeneeded: null,
    error: null,
    readyState: 'pending',
    result: null,
    source: null,
    transaction: null,
};
const SELF = ['frames', 'parent', 'self', 'top', 'window'];
const WINDOW_HANDLER = {
    get: (windowRef, key) => {
        if (SELF.includes(key)) {
            return windowRef;
        }
        return key.startsWith('on') ? null : windowRef[key];
    },
};
export const UNIVERSAL_WINDOW = {
    provide: WINDOW,
    deps: [DOCUMENT, [new Optional(), SSR_LOCATION], [new Optional(), SSR_USER_AGENT]],
    useFactory: (document, location, userAgent) => {
        const windowMock = {
            ...EVENT_TARGET,
            document,
            localStorage: new StorageMock(),
            location: location || new LocationMock(),
            navigator: { ...NAVIGATOR_MOCK, userAgent: userAgent || '' },
            performance: performanceFactory(),
            sessionStorage: new StorageMock(),
            speechSynthesis: SPEECH_SYNTHESIS_MOCK,
            caches: CACHES_MOCK,
            crypto: CRYPTO_MOCK,
            URL,
            URLSearchParams,
            setTimeout,
            setInterval,
            clearTimeout,
            clearInterval,
            console,
            Blob: BlobMock,
            alert: emptyFunction,
            clientInformation: { ...NAVIGATOR_MOCK, userAgent: userAgent || '' },
            // TODO: Candidate for token
            matchMedia: () => ({
                ...EVENT_TARGET,
                matches: false,
                media: '',
                onchange: null,
                addListener: emptyFunction,
                removeListener: emptyFunction,
            }),
            // TODO: Candidate for token
            indexedDB: {
                cmp: alwaysZero,
                open: () => DB_REQUEST,
                deleteDatabase: () => DB_REQUEST,
            },
            customElements: {
                define: emptyFunction,
                get: emptyFunction,
                upgrade: emptyFunction,
                whenDefined: alwaysRejected,
            },
            styleMedia: {
                type: '',
                matchMedium: alwaysFalse,
            },
            history: {
                length: 0,
                scrollRestoration: 'auto',
                state: {},
                back: emptyFunction,
                forward: emptyFunction,
                go: emptyFunction,
                pushState: emptyFunction,
                replaceState: emptyFunction,
            },
            closed: false,
            defaultStatus: '',
            devicePixelRatio: 1,
            doNotTrack: '',
            frameElement: null,
            innerHeight: 0,
            innerWidth: 0,
            isSecureContext: false,
            length: 0,
            name: '',
            offscreenBuffering: false,
            opener: {},
            origin: '',
            orientation: '',
            outerHeight: 0,
            outerWidth: 0,
            pageXOffset: 0,
            pageYOffset: 0,
            screenLeft: 0,
            screenTop: 0,
            screenX: 0,
            screenY: 0,
            scrollX: 0,
            scrollY: 0,
            status: '',
            blur: emptyFunction,
            cancelAnimationFrame: emptyFunction,
            captureEvents: emptyFunction,
            close: emptyFunction,
            confirm: alwaysFalse,
            departFocus: emptyFunction,
            focus: emptyFunction,
            moveBy: emptyFunction,
            moveTo: emptyFunction,
            open: alwaysNull,
            postMessage: emptyFunction,
            print: emptyFunction,
            prompt: alwaysNull,
            releaseEvents: emptyFunction,
            requestAnimationFrame: alwaysZero,
            resizeBy: emptyFunction,
            resizeTo: emptyFunction,
            scroll: emptyFunction,
            scrollBy: emptyFunction,
            scrollTo: emptyFunction,
            stop: emptyFunction,
            atob: identity,
            btoa: identity,
            fetch: alwaysRejected,
            createImageBitmap: alwaysRejected,
            queueMicrotask: emptyFunction,
            locationbar: BAR_PROP,
            menubar: BAR_PROP,
            personalbar: BAR_PROP,
            scrollbars: BAR_PROP,
            statusbar: BAR_PROP,
            toolbar: BAR_PROP,
            getComputedStyle: () => COMPUTED_STYLES_PROXY,
            getMatchedCSSRules: () => CSS_RULES,
            getSelection: () => null,
        };
        return new Proxy(windowMock, WINDOW_HANDLER);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdmVyc2FsLXdpbmRvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYnMvdW5pdmVyc2FsL3NyYy9jb25zdGFudHMvdW5pdmVyc2FsLXdpbmRvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUNILFdBQVcsRUFDWCxVQUFVLEVBQ1YsY0FBYyxFQUNkLFVBQVUsRUFDVixhQUFhLEVBQ2IsUUFBUSxHQUNYLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFFbkUsTUFBTSxlQUFlLEdBQWlDO0lBQ2xELG1CQUFtQixFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7SUFDN0IsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtJQUMxQixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtJQUNkLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO0lBQ3hCLFdBQVcsRUFBRSxhQUFhO0NBQzdCLENBQUM7QUFDRixNQUFNLHVCQUF1QixHQUFzQztJQUMvRCxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQ3pELENBQUM7QUFDRixNQUFNLHFCQUFxQixHQUFHLElBQUksS0FBSyxDQUNuQyxlQUFzQixFQUN0Qix1QkFBdUIsQ0FDMUIsQ0FBQztBQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFNLFNBQVEsS0FBYztJQUN4QyxJQUFJLEdBQUcsR0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDO0NBQ2xDLENBQUMsRUFBRSxDQUFDO0FBQ0wsTUFBTSxRQUFRLEdBQVk7SUFDdEIsT0FBTyxFQUFFLEtBQUs7Q0FDakIsQ0FBQztBQUNGLE1BQU0sVUFBVSxHQUFxQjtJQUNqQyxHQUFHLFlBQVk7SUFDZixTQUFTLEVBQUUsSUFBSTtJQUNmLE9BQU8sRUFBRSxJQUFJO0lBQ2IsU0FBUyxFQUFFLElBQUk7SUFDZixlQUFlLEVBQUUsSUFBSTtJQUNyQixLQUFLLEVBQUUsSUFBSTtJQUNYLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLE1BQU0sRUFBRSxJQUFXO0lBQ25CLE1BQU0sRUFBRSxJQUFXO0lBQ25CLFdBQVcsRUFBRSxJQUFJO0NBQ3BCLENBQUM7QUFDRixNQUFNLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMzRCxNQUFNLGNBQWMsR0FBeUI7SUFDekMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUVELE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBbUIsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FDSixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQW9CO0lBQzdDLE9BQU8sRUFBRSxNQUFNO0lBQ2YsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDbEYsVUFBVSxFQUFFLENBQ1IsUUFBa0IsRUFDbEIsUUFBeUIsRUFDekIsU0FBd0IsRUFDbEIsRUFBRTtRQUNSLE1BQU0sVUFBVSxHQUFXO1lBQ3ZCLEdBQUcsWUFBWTtZQUNmLFFBQVE7WUFDUixZQUFZLEVBQUUsSUFBSSxXQUFXLEVBQUU7WUFDL0IsUUFBUSxFQUFFLFFBQVEsSUFBSSxJQUFJLFlBQVksRUFBRTtZQUN4QyxTQUFTLEVBQUUsRUFBQyxHQUFHLGNBQWMsRUFBRSxTQUFTLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBQztZQUMxRCxXQUFXLEVBQUUsa0JBQWtCLEVBQUU7WUFDakMsY0FBYyxFQUFFLElBQUksV0FBVyxFQUFFO1lBQ2pDLGVBQWUsRUFBRSxxQkFBcUI7WUFDdEMsTUFBTSxFQUFFLFdBQVc7WUFDbkIsTUFBTSxFQUFFLFdBQVc7WUFDbkIsR0FBRztZQUNILGVBQWU7WUFDZixVQUFVO1lBQ1YsV0FBVztZQUNYLFlBQVk7WUFDWixhQUFhO1lBQ2IsT0FBTztZQUNQLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7WUFDcEIsaUJBQWlCLEVBQUUsRUFBQyxHQUFHLGNBQWMsRUFBRSxTQUFTLEVBQUUsU0FBUyxJQUFJLEVBQUUsRUFBQztZQUNsRSw0QkFBNEI7WUFDNUIsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ2YsR0FBRyxZQUFZO2dCQUNmLE9BQU8sRUFBRSxLQUFLO2dCQUNkLEtBQUssRUFBRSxFQUFFO2dCQUNULFFBQVEsRUFBRSxJQUFJO2dCQUNkLFdBQVcsRUFBRSxhQUFhO2dCQUMxQixjQUFjLEVBQUUsYUFBYTthQUNoQyxDQUFDO1lBQ0YsNEJBQTRCO1lBQzVCLFNBQVMsRUFBRTtnQkFDUCxHQUFHLEVBQUUsVUFBVTtnQkFDZixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVTtnQkFDdEIsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVU7YUFDbkM7WUFDRCxjQUFjLEVBQUU7Z0JBQ1osTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLEdBQUcsRUFBRSxhQUFhO2dCQUNsQixPQUFPLEVBQUUsYUFBYTtnQkFDdEIsV0FBVyxFQUFFLGNBQWM7YUFDOUI7WUFDRCxVQUFVLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsV0FBVyxFQUFFLFdBQVc7YUFDM0I7WUFDRCxPQUFPLEVBQUU7Z0JBQ0wsTUFBTSxFQUFFLENBQUM7Z0JBQ1QsaUJBQWlCLEVBQUUsTUFBTTtnQkFDekIsS0FBSyxFQUFFLEVBQUU7Z0JBQ1QsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixFQUFFLEVBQUUsYUFBYTtnQkFDakIsU0FBUyxFQUFFLGFBQWE7Z0JBQ3hCLFlBQVksRUFBRSxhQUFhO2FBQzlCO1lBQ0QsTUFBTSxFQUFFLEtBQUs7WUFDYixhQUFhLEVBQUUsRUFBRTtZQUNqQixnQkFBZ0IsRUFBRSxDQUFDO1lBQ25CLFVBQVUsRUFBRSxFQUFFO1lBQ2QsWUFBWSxFQUFFLElBQUk7WUFDbEIsV0FBVyxFQUFFLENBQUM7WUFDZCxVQUFVLEVBQUUsQ0FBQztZQUNiLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsSUFBSSxFQUFFLEVBQUU7WUFDUixrQkFBa0IsRUFBRSxLQUFLO1lBQ3pCLE1BQU0sRUFBRSxFQUFFO1lBQ1YsTUFBTSxFQUFFLEVBQUU7WUFDVixXQUFXLEVBQUUsRUFBRTtZQUNmLFdBQVcsRUFBRSxDQUFDO1lBQ2QsVUFBVSxFQUFFLENBQUM7WUFDYixXQUFXLEVBQUUsQ0FBQztZQUNkLFdBQVcsRUFBRSxDQUFDO1lBQ2QsVUFBVSxFQUFFLENBQUM7WUFDYixTQUFTLEVBQUUsQ0FBQztZQUNaLE9BQU8sRUFBRSxDQUFDO1lBQ1YsT0FBTyxFQUFFLENBQUM7WUFDVixPQUFPLEVBQUUsQ0FBQztZQUNWLE9BQU8sRUFBRSxDQUFDO1lBQ1YsTUFBTSxFQUFFLEVBQUU7WUFDVixJQUFJLEVBQUUsYUFBYTtZQUNuQixvQkFBb0IsRUFBRSxhQUFhO1lBQ25DLGFBQWEsRUFBRSxhQUFhO1lBQzVCLEtBQUssRUFBRSxhQUFhO1lBQ3BCLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFdBQVcsRUFBRSxhQUFhO1lBQzFCLEtBQUssRUFBRSxhQUFhO1lBQ3BCLE1BQU0sRUFBRSxhQUFhO1lBQ3JCLE1BQU0sRUFBRSxhQUFhO1lBQ3JCLElBQUksRUFBRSxVQUFVO1lBQ2hCLFdBQVcsRUFBRSxhQUFhO1lBQzFCLEtBQUssRUFBRSxhQUFhO1lBQ3BCLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLGFBQWEsRUFBRSxhQUFhO1lBQzVCLHFCQUFxQixFQUFFLFVBQVU7WUFDakMsUUFBUSxFQUFFLGFBQWE7WUFDdkIsUUFBUSxFQUFFLGFBQWE7WUFDdkIsTUFBTSxFQUFFLGFBQWE7WUFDckIsUUFBUSxFQUFFLGFBQWE7WUFDdkIsUUFBUSxFQUFFLGFBQWE7WUFDdkIsSUFBSSxFQUFFLGFBQWE7WUFDbkIsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxjQUFjO1lBQ3JCLGlCQUFpQixFQUFFLGNBQWM7WUFDakMsY0FBYyxFQUFFLGFBQWE7WUFDN0IsV0FBVyxFQUFFLFFBQVE7WUFDckIsT0FBTyxFQUFFLFFBQVE7WUFDakIsV0FBVyxFQUFFLFFBQVE7WUFDckIsVUFBVSxFQUFFLFFBQVE7WUFDcEIsU0FBUyxFQUFFLFFBQVE7WUFDbkIsT0FBTyxFQUFFLFFBQVE7WUFDakIsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMscUJBQXFCO1lBQzdDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVM7WUFDbkMsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDcEIsQ0FBQztRQUVULE9BQU8sSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB0eXBlIHtGYWN0b3J5UHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5cbmltcG9ydCB7QmxvYk1vY2t9IGZyb20gJy4uL2NsYXNzZXMvYmxvYi1tb2NrJztcbmltcG9ydCB7TG9jYXRpb25Nb2NrfSBmcm9tICcuLi9jbGFzc2VzL2xvY2F0aW9uLW1vY2snO1xuaW1wb3J0IHtTdG9yYWdlTW9ja30gZnJvbSAnLi4vY2xhc3Nlcy9zdG9yYWdlLW1vY2snO1xuaW1wb3J0IHtTU1JfTE9DQVRJT059IGZyb20gJy4uL3Rva2Vucy9zc3ItbG9jYXRpb24nO1xuaW1wb3J0IHtTU1JfVVNFUl9BR0VOVH0gZnJvbSAnLi4vdG9rZW5zL3Nzci11c2VyLWFnZW50JztcbmltcG9ydCB7RVZFTlRfVEFSR0VUfSBmcm9tICcuLi91dGlscy9ldmVudC10YXJnZXQnO1xuaW1wb3J0IHtcbiAgICBhbHdheXNGYWxzZSxcbiAgICBhbHdheXNOdWxsLFxuICAgIGFsd2F5c1JlamVjdGVkLFxuICAgIGFsd2F5c1plcm8sXG4gICAgZW1wdHlGdW5jdGlvbixcbiAgICBpZGVudGl0eSxcbn0gZnJvbSAnLi4vdXRpbHMvZnVuY3Rpb25zJztcbmltcG9ydCB7Q0FDSEVTX01PQ0t9IGZyb20gJy4vdW5pdmVyc2FsLWNhY2hlcyc7XG5pbXBvcnQge0NSWVBUT19NT0NLfSBmcm9tICcuL3VuaXZlcnNhbC1jcnlwdG8nO1xuaW1wb3J0IHtOQVZJR0FUT1JfTU9DS30gZnJvbSAnLi91bml2ZXJzYWwtbmF2aWdhdG9yJztcbmltcG9ydCB7cGVyZm9ybWFuY2VGYWN0b3J5fSBmcm9tICcuL3VuaXZlcnNhbC1wZXJmb3JtYW5jZSc7XG5pbXBvcnQge1NQRUVDSF9TWU5USEVTSVNfTU9DS30gZnJvbSAnLi91bml2ZXJzYWwtc3BlZWNoLXN5bnRoZXNpcyc7XG5cbmNvbnN0IENPTVBVVEVEX1NUWUxFUzogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiA9IHtcbiAgICBnZXRQcm9wZXJ0eVByaW9yaXR5OiAoKSA9PiAnJyxcbiAgICBnZXRQcm9wZXJ0eVZhbHVlOiAoKSA9PiAnJyxcbiAgICBpdGVtOiAoKSA9PiAnJyxcbiAgICByZW1vdmVQcm9wZXJ0eTogKCkgPT4gJycsXG4gICAgc2V0UHJvcGVydHk6IGVtcHR5RnVuY3Rpb24sXG59O1xuY29uc3QgQ09NUFVURURfU1RZTEVTX0hBTkRMRVI6IFByb3h5SGFuZGxlcjxDU1NTdHlsZURlY2xhcmF0aW9uPiA9IHtcbiAgICBnZXQ6IChvYmosIGtleTogYW55KSA9PiAoa2V5IGluIG9iaiA/IG9ialtrZXldIDogbnVsbCksXG59O1xuY29uc3QgQ09NUFVURURfU1RZTEVTX1BST1hZID0gbmV3IFByb3h5PENTU1N0eWxlRGVjbGFyYXRpb24+KFxuICAgIENPTVBVVEVEX1NUWUxFUyBhcyBhbnksXG4gICAgQ09NUFVURURfU1RZTEVTX0hBTkRMRVIsXG4pO1xuY29uc3QgQ1NTX1JVTEVTID0gbmV3IChjbGFzcyBleHRlbmRzIEFycmF5PENTU1J1bGU+IGltcGxlbWVudHMgQ1NTUnVsZUxpc3Qge1xuICAgIHB1YmxpYyBpdGVtID0gKCk6IG51bGwgPT4gbnVsbDtcbn0pKCk7XG5jb25zdCBCQVJfUFJPUDogQmFyUHJvcCA9IHtcbiAgICB2aXNpYmxlOiBmYWxzZSxcbn07XG5jb25zdCBEQl9SRVFVRVNUOiBJREJPcGVuREJSZXF1ZXN0ID0ge1xuICAgIC4uLkVWRU5UX1RBUkdFVCxcbiAgICBvbmJsb2NrZWQ6IG51bGwsXG4gICAgb25lcnJvcjogbnVsbCxcbiAgICBvbnN1Y2Nlc3M6IG51bGwsXG4gICAgb251cGdyYWRlbmVlZGVkOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxuICAgIHJlYWR5U3RhdGU6ICdwZW5kaW5nJyxcbiAgICByZXN1bHQ6IG51bGwgYXMgYW55LCAvLyBDYW5ub3QgYmUgYWNjZXNzZWQgZm9yICdwZW5kaW5nJyBzdGF0ZSBhbnl3YXlcbiAgICBzb3VyY2U6IG51bGwgYXMgYW55LCAvLyBudWxsIGZvciBvcGVuIHJlcXVlc3RzXG4gICAgdHJhbnNhY3Rpb246IG51bGwsXG59O1xuY29uc3QgU0VMRiA9IFsnZnJhbWVzJywgJ3BhcmVudCcsICdzZWxmJywgJ3RvcCcsICd3aW5kb3cnXTtcbmNvbnN0IFdJTkRPV19IQU5ETEVSOiBQcm94eUhhbmRsZXI8V2luZG93PiA9IHtcbiAgICBnZXQ6ICh3aW5kb3dSZWYsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChTRUxGLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3dSZWY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoJ29uJykgPyBudWxsIDogd2luZG93UmVmW2tleSBhcyBrZXlvZiBXaW5kb3ddO1xuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVU5JVkVSU0FMX1dJTkRPVzogRmFjdG9yeVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IFdJTkRPVyxcbiAgICBkZXBzOiBbRE9DVU1FTlQsIFtuZXcgT3B0aW9uYWwoKSwgU1NSX0xPQ0FUSU9OXSwgW25ldyBPcHRpb25hbCgpLCBTU1JfVVNFUl9BR0VOVF1dLFxuICAgIHVzZUZhY3Rvcnk6IChcbiAgICAgICAgZG9jdW1lbnQ6IERvY3VtZW50LFxuICAgICAgICBsb2NhdGlvbjogTG9jYXRpb24gfCBudWxsLFxuICAgICAgICB1c2VyQWdlbnQ6IHN0cmluZyB8IG51bGwsXG4gICAgKTogV2luZG93ID0+IHtcbiAgICAgICAgY29uc3Qgd2luZG93TW9jazogV2luZG93ID0ge1xuICAgICAgICAgICAgLi4uRVZFTlRfVEFSR0VULFxuICAgICAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2U6IG5ldyBTdG9yYWdlTW9jaygpLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uIHx8IG5ldyBMb2NhdGlvbk1vY2soKSxcbiAgICAgICAgICAgIG5hdmlnYXRvcjogey4uLk5BVklHQVRPUl9NT0NLLCB1c2VyQWdlbnQ6IHVzZXJBZ2VudCB8fCAnJ30sXG4gICAgICAgICAgICBwZXJmb3JtYW5jZTogcGVyZm9ybWFuY2VGYWN0b3J5KCksXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZTogbmV3IFN0b3JhZ2VNb2NrKCksXG4gICAgICAgICAgICBzcGVlY2hTeW50aGVzaXM6IFNQRUVDSF9TWU5USEVTSVNfTU9DSyxcbiAgICAgICAgICAgIGNhY2hlczogQ0FDSEVTX01PQ0ssXG4gICAgICAgICAgICBjcnlwdG86IENSWVBUT19NT0NLLFxuICAgICAgICAgICAgVVJMLFxuICAgICAgICAgICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgICAgICAgICAgc2V0VGltZW91dCxcbiAgICAgICAgICAgIHNldEludGVydmFsLFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0LFxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCxcbiAgICAgICAgICAgIGNvbnNvbGUsXG4gICAgICAgICAgICBCbG9iOiBCbG9iTW9jayxcbiAgICAgICAgICAgIGFsZXJ0OiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgY2xpZW50SW5mb3JtYXRpb246IHsuLi5OQVZJR0FUT1JfTU9DSywgdXNlckFnZW50OiB1c2VyQWdlbnQgfHwgJyd9LFxuICAgICAgICAgICAgLy8gVE9ETzogQ2FuZGlkYXRlIGZvciB0b2tlblxuICAgICAgICAgICAgbWF0Y2hNZWRpYTogKCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5FVkVOVF9UQVJHRVQsXG4gICAgICAgICAgICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVkaWE6ICcnLFxuICAgICAgICAgICAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvLyBUT0RPOiBDYW5kaWRhdGUgZm9yIHRva2VuXG4gICAgICAgICAgICBpbmRleGVkREI6IHtcbiAgICAgICAgICAgICAgICBjbXA6IGFsd2F5c1plcm8sXG4gICAgICAgICAgICAgICAgb3BlbjogKCkgPT4gREJfUkVRVUVTVCxcbiAgICAgICAgICAgICAgICBkZWxldGVEYXRhYmFzZTogKCkgPT4gREJfUkVRVUVTVCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXN0b21FbGVtZW50czoge1xuICAgICAgICAgICAgICAgIGRlZmluZTogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBnZXQ6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgdXBncmFkZTogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgICAgICB3aGVuRGVmaW5lZDogYWx3YXlzUmVqZWN0ZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGVNZWRpYToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxuICAgICAgICAgICAgICAgIG1hdGNoTWVkaXVtOiBhbHdheXNGYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoaXN0b3J5OiB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICAgICAgICAgIHNjcm9sbFJlc3RvcmF0aW9uOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICAgICAgICAgIGJhY2s6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgZm9yd2FyZDogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBnbzogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBwdXNoU3RhdGU6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgcmVwbGFjZVN0YXRlOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb3NlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0U3RhdHVzOiAnJyxcbiAgICAgICAgICAgIGRldmljZVBpeGVsUmF0aW86IDEsXG4gICAgICAgICAgICBkb05vdFRyYWNrOiAnJyxcbiAgICAgICAgICAgIGZyYW1lRWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgIGlubmVySGVpZ2h0OiAwLFxuICAgICAgICAgICAgaW5uZXJXaWR0aDogMCxcbiAgICAgICAgICAgIGlzU2VjdXJlQ29udGV4dDogZmFsc2UsXG4gICAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgIG9mZnNjcmVlbkJ1ZmZlcmluZzogZmFsc2UsXG4gICAgICAgICAgICBvcGVuZXI6IHt9LFxuICAgICAgICAgICAgb3JpZ2luOiAnJyxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnJyxcbiAgICAgICAgICAgIG91dGVySGVpZ2h0OiAwLFxuICAgICAgICAgICAgb3V0ZXJXaWR0aDogMCxcbiAgICAgICAgICAgIHBhZ2VYT2Zmc2V0OiAwLFxuICAgICAgICAgICAgcGFnZVlPZmZzZXQ6IDAsXG4gICAgICAgICAgICBzY3JlZW5MZWZ0OiAwLFxuICAgICAgICAgICAgc2NyZWVuVG9wOiAwLFxuICAgICAgICAgICAgc2NyZWVuWDogMCxcbiAgICAgICAgICAgIHNjcmVlblk6IDAsXG4gICAgICAgICAgICBzY3JvbGxYOiAwLFxuICAgICAgICAgICAgc2Nyb2xsWTogMCxcbiAgICAgICAgICAgIHN0YXR1czogJycsXG4gICAgICAgICAgICBibHVyOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBjYXB0dXJlRXZlbnRzOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgY2xvc2U6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBjb25maXJtOiBhbHdheXNGYWxzZSxcbiAgICAgICAgICAgIGRlcGFydEZvY3VzOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgZm9jdXM6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBtb3ZlQnk6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBtb3ZlVG86IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBvcGVuOiBhbHdheXNOdWxsLFxuICAgICAgICAgICAgcG9zdE1lc3NhZ2U6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBwcmludDogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgIHByb21wdDogYWx3YXlzTnVsbCxcbiAgICAgICAgICAgIHJlbGVhc2VFdmVudHM6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGFsd2F5c1plcm8sXG4gICAgICAgICAgICByZXNpemVCeTogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgIHJlc2l6ZVRvOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgc2Nyb2xsOiBlbXB0eUZ1bmN0aW9uLFxuICAgICAgICAgICAgc2Nyb2xsQnk6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBzY3JvbGxUbzogZW1wdHlGdW5jdGlvbixcbiAgICAgICAgICAgIHN0b3A6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBhdG9iOiBpZGVudGl0eSxcbiAgICAgICAgICAgIGJ0b2E6IGlkZW50aXR5LFxuICAgICAgICAgICAgZmV0Y2g6IGFsd2F5c1JlamVjdGVkLFxuICAgICAgICAgICAgY3JlYXRlSW1hZ2VCaXRtYXA6IGFsd2F5c1JlamVjdGVkLFxuICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2s6IGVtcHR5RnVuY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbmJhcjogQkFSX1BST1AsXG4gICAgICAgICAgICBtZW51YmFyOiBCQVJfUFJPUCxcbiAgICAgICAgICAgIHBlcnNvbmFsYmFyOiBCQVJfUFJPUCxcbiAgICAgICAgICAgIHNjcm9sbGJhcnM6IEJBUl9QUk9QLFxuICAgICAgICAgICAgc3RhdHVzYmFyOiBCQVJfUFJPUCxcbiAgICAgICAgICAgIHRvb2xiYXI6IEJBUl9QUk9QLFxuICAgICAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZTogKCkgPT4gQ09NUFVURURfU1RZTEVTX1BST1hZLFxuICAgICAgICAgICAgZ2V0TWF0Y2hlZENTU1J1bGVzOiAoKSA9PiBDU1NfUlVMRVMsXG4gICAgICAgICAgICBnZXRTZWxlY3Rpb246ICgpID0+IG51bGwsXG4gICAgICAgIH0gYXMgYW55O1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkod2luZG93TW9jaywgV0lORE9XX0hBTkRMRVIpO1xuICAgIH0sXG59O1xuIl19