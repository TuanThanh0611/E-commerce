import * as queryDevtools from '@tanstack/query-devtools';
import { ElementRef } from '@angular/core';
import { QueryClient } from '@tanstack/angular-query-experimental';
import type { AfterViewInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import type { DevtoolsErrorType } from '@tanstack/query-devtools';
import * as i0 from "@angular/core";
export declare class AngularQueryDevtools implements AfterViewInit, OnChanges, OnDestroy {
    #private;
    /**
     * Add this attribute if you want the dev tools to default to being open
     * @example
     * <angular-query-devtools initialIsOpen />
     */
    initialIsOpen?: boolean;
    /**
     * The position of the TanStack logo to open and close the devtools panel.
     * `top-left` | `top-right` | `bottom-left` | `bottom-right` | `relative`
     * Defaults to `bottom-right`.
     * If `relative`, the button is placed in the location that you render the devtools.
     * @example
     * <angular-query-devtools buttonPosition="top-right" />
     */
    buttonPosition?: queryDevtools.DevtoolsButtonPosition;
    /**
     * The position of the Angular Query devtools panel.
     * `top` | `bottom` | `left` | `right`
     * Defaults to `bottom`.
     * @example
     * <angular-query-devtools position="bottom" />
     */
    position?: queryDevtools.DevtoolsPosition;
    /**
     * Custom instance of QueryClient
     * @example
     * <angular-query-devtools [client]="queryClient" />
     */
    client?: QueryClient;
    /**
     * Use this to pass a nonce to the style tag that is added to the document head. This is useful if you are using a Content Security Policy (CSP) nonce to allow inline styles.
     * @example
     * <angular-query-devtools styleNonce="YourRandomNonceValue" />
     */
    styleNonce?: string;
    /**
     * Use this so you can attach the devtool's styles to specific element in the DOM.
     */
    shadowDOMTarget?: ShadowRoot;
    /**
     * Use this so you can define custom errors that can be shown in the devtools.
     */
    errorTypes?: Array<DevtoolsErrorType>;
    ref: ElementRef;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AngularQueryDevtools, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AngularQueryDevtools, "angular-query-devtools", never, { "initialIsOpen": { "alias": "initialIsOpen"; "required": false; }; "buttonPosition": { "alias": "buttonPosition"; "required": false; }; "position": { "alias": "position"; "required": false; }; "client": { "alias": "client"; "required": false; }; "styleNonce": { "alias": "styleNonce"; "required": false; }; "shadowDOMTarget": { "alias": "shadowDOMTarget"; "required": false; }; "errorTypes": { "alias": "errorTypes"; "required": false; }; }, {}, never, never, true, never>;
    static ngAcceptInputType_initialIsOpen: unknown;
}
