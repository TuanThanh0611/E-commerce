import { isPlatformBrowser } from '@angular/common';
import * as queryDevtools from '@tanstack/query-devtools';
import * as i0 from '@angular/core';
import { inject, PLATFORM_ID, booleanAttribute, Component, ChangeDetectionStrategy, Input, ViewChild } from '@angular/core';
import { injectQueryClient, onlineManager } from '@tanstack/angular-query-experimental';

class AngularQueryDevtools {
    /*
     * It is intentional that there are no default values on inputs.
     * Core devtools will set defaults when values are undefined.
     *
     * Signal inputs are not used to remain compatible with previous Angular versions.
     */
    /**
     * Add this attribute if you want the dev tools to default to being open
     * @example
     * <angular-query-devtools initialIsOpen />
     */
    initialIsOpen;
    /**
     * The position of the TanStack logo to open and close the devtools panel.
     * `top-left` | `top-right` | `bottom-left` | `bottom-right` | `relative`
     * Defaults to `bottom-right`.
     * If `relative`, the button is placed in the location that you render the devtools.
     * @example
     * <angular-query-devtools buttonPosition="top-right" />
     */
    buttonPosition;
    /**
     * The position of the Angular Query devtools panel.
     * `top` | `bottom` | `left` | `right`
     * Defaults to `bottom`.
     * @example
     * <angular-query-devtools position="bottom" />
     */
    position;
    /**
     * Custom instance of QueryClient
     * @example
     * <angular-query-devtools [client]="queryClient" />
     */
    client;
    /**
     * Use this to pass a nonce to the style tag that is added to the document head. This is useful if you are using a Content Security Policy (CSP) nonce to allow inline styles.
     * @example
     * <angular-query-devtools styleNonce="YourRandomNonceValue" />
     */
    styleNonce;
    /**
     * Use this so you can attach the devtool's styles to specific element in the DOM.
     */
    shadowDOMTarget;
    /**
     * Use this so you can define custom errors that can be shown in the devtools.
     */
    errorTypes;
    ref;
    #devtools;
    #isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    #injectedClient = this.#isBrowser
        ? injectQueryClient({
            optional: true,
        })
        : null;
    ngOnChanges(changes) {
        if (!this.#devtools)
            return;
        if (changes['client']) {
            this.#devtools.setClient(this.#getAppliedQueryClient());
        }
        if (changes['buttonPosition'] && this.buttonPosition !== undefined) {
            this.#devtools.setButtonPosition(this.buttonPosition);
        }
        if (changes['position'] && this.position !== undefined) {
            this.#devtools.setPosition(this.position);
        }
        if (changes['initialIsOpen'] && this.initialIsOpen !== undefined) {
            this.#devtools.setInitialIsOpen(this.initialIsOpen);
        }
        if (changes['errorTypes'] && this.errorTypes !== undefined) {
            this.#devtools.setErrorTypes(this.errorTypes);
        }
    }
    ngAfterViewInit() {
        if (!this.#isBrowser)
            return;
        const devtools = new queryDevtools.TanstackQueryDevtools({
            client: this.#getAppliedQueryClient(),
            queryFlavor: 'Angular Query',
            version: '5',
            onlineManager,
            buttonPosition: this.buttonPosition,
            position: this.position,
            initialIsOpen: this.initialIsOpen,
            errorTypes: this.errorTypes,
            styleNonce: this.styleNonce,
            shadowDOMTarget: this.shadowDOMTarget,
        });
        devtools.mount(this.ref.nativeElement);
        this.#devtools = devtools;
    }
    ngOnDestroy() {
        this.#devtools?.unmount();
    }
    #getAppliedQueryClient() {
        const client = this.client ?? this.#injectedClient;
        if (!client) {
            throw new Error('You must either provide a client via `provideAngularQuery` ' +
                'or pass it to the `client` attribute of `<angular-query-devtools>`.');
        }
        return client;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AngularQueryDevtools, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.12", type: AngularQueryDevtools, isStandalone: true, selector: "angular-query-devtools", inputs: { initialIsOpen: ["initialIsOpen", "initialIsOpen", booleanAttribute], buttonPosition: "buttonPosition", position: "position", client: "client", styleNonce: "styleNonce", shadowDOMTarget: "shadowDOMTarget", errorTypes: "errorTypes" }, host: { attributes: { "ngSkipHydration": "true" } }, viewQueries: [{ propertyName: "ref", first: true, predicate: ["ref"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `<div class="tsqd-parent-container" #ref></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AngularQueryDevtools, decorators: [{
            type: Component,
            args: [{
                    selector: 'angular-query-devtools',
                    standalone: true,
                    template: `<div class="tsqd-parent-container" #ref></div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { ngSkipHydration: 'true' },
                }]
        }], propDecorators: { initialIsOpen: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonPosition: [{
                type: Input
            }], position: [{
                type: Input
            }], client: [{
                type: Input
            }], styleNonce: [{
                type: Input
            }], shadowDOMTarget: [{
                type: Input
            }], errorTypes: [{
                type: Input
            }], ref: [{
                type: ViewChild,
                args: ['ref']
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { AngularQueryDevtools };
//# sourceMappingURL=tanstack-angular-query-devtools-experimental.mjs.map
